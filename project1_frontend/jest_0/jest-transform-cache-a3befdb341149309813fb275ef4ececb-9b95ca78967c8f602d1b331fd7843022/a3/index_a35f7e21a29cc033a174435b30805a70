'use strict';Object.defineProperty(exports, "__esModule", { value: true });exports.























































watchRegister = watchRegister;exports.





postRegister = postRegister;exports.



















watchId = watchId;exports.





postId = postId;exports.

















watchLogin = watchLogin;exports.






postLogin = postLogin;exports.






















































watchGetUser = watchGetUser;exports.





















getUser = getUser;exports.























watchChat = watchChat;exports.






postChat = postChat;exports.

















watchGetChat = watchGetChat;exports.






getChat = getChat;exports.














watchArticle = watchArticle;exports.






postArticle = postArticle;exports.





















watchGetArticle_WITH_ID = watchGetArticle_WITH_ID;exports.






getArticle_WITH_ID = getArticle_WITH_ID;exports.
































































watchGetArticle = watchGetArticle;exports.






getArticle = getArticle;exports.









































































watchDeleteImage = watchDeleteImage;exports.






deleteImage = deleteImage;exports.

















watchGetImage = watchGetImage;exports.






getImage = getImage;exports.






































watchComment = watchComment;exports.








postComment = postComment;exports.























watchGetComment = watchGetComment;exports.






getComment = getComment;exports.






















































watchLike = watchLike;exports.







postLike = postLike;exports.























watchGetLike = watchGetLike;exports.






getLike = getLike;exports.

















































watchDeleteLike = watchDeleteLike;exports.






deleteLike = deleteLike;exports.






















watchDeleteArticle = watchDeleteArticle;exports.






deleteArticle = deleteArticle;exports.


















watchUpdateArticle = watchUpdateArticle;exports.






updateArticle = updateArticle;exports.





































watchGetGroupList = watchGetGroupList;exports.






getGroupList = getGroupList;exports.











































watchPostGroupList = watchPostGroupList;exports.






postGroupList = postGroupList;exports.































watchPostGroupMember = watchPostGroupMember;exports.






postGroupMember = postGroupMember;exports.





















watchDeleteGroupMember = watchDeleteGroupMember;exports.






deleteGroupMember = deleteGroupMember;exports.




















watchGetGroupNotice = watchGetGroupNotice;exports.






getGroupNotice = getGroupNotice;exports.






































watchGetGroupForum = watchGetGroupForum;exports.






getGroupForum = getGroupForum;exports.







































watchPostGroupNotice = watchPostGroupNotice;exports.






postGroupNotice = postGroupNotice;exports.





















watchPostGroupForum = watchPostGroupForum;exports.






postGroupForum = postGroupForum;exports.





















watchImage = watchImage;exports.






postImage = postImage;exports.





























watchGetProfile = watchGetProfile;exports.






getProfile = getProfile;exports.
















































watchUpdateProfile = watchUpdateProfile;exports.






updateProfile = updateProfile;exports.










































watchGetFollow = watchGetFollow;exports.






getFollow = getFollow;exports.
































watchPostFollow = watchPostFollow;exports.






postFollow = postFollow;exports.





















watchDeleteFollow = watchDeleteFollow;exports.






deleteFollow = deleteFollow;exports.




















watchGetFollowArticle = watchGetFollowArticle;exports.






getFollowArticle = getFollowArticle;exports.












































Saga = Saga;var _effects = require('redux-saga/effects');var _reduxSaga = require('redux-saga');var _actions = require('../actions'); ////////////////////////////////////////////
//const url='http://localhost:8000/'
const url = 'http://13.124.72.170:8000/'; //const url='http://13.124.72.170:8888/'
const user_dup_url = url + 'users/duplication/';const user_url = url + 'users/';const user_login_url = url + 'users/login/';const chat_url = url + 'chatting/';const chat_userlist_url = url + 'chatting/userlist/';const article_url = url + 'article/';const image_url = url + 'image/';const profile_url = url + 'profile/';function image_id_url(id) {return image_url + id + '/';}function article_url_WITH_ID(id) {return article_url + id + '/';}function comment_url(id) {return article_url + id + '/comment/';}function like_url(id) {return article_url + id + '/like/';}function like_comment_url(id1, id2) {return article_url + id1 + '/comment/' + id2 + '/like/';}const group_list_url = url + 'group/';function group_member_url(id) {return group_list_url + id + '/member/';}function group_notice_url(id) {return group_list_url + id + '/notice/';}function group_forum_url(id) {return group_list_url + id + '/forum/';}const follow_url = url + 'follow/';function follow_retrieve_url(id) {return follow_url + id + '/';}function follow_article_url(id) {return follow_url + id + '/article/';}function* watchRegister() {while (true) {const data = yield (0, _effects.take)('POST_REGISTER_REQUEST');yield (0, _effects.call)(postRegister, data);}}function* postRegister(data) {let uname = data.uname;let upwd = data.upwd;let uemail = data.uemail;console.log(uname);console.log(upwd);console.log(uemail);const response = yield (0, _effects.call)(fetch, user_url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ 'username': uname, 'password': upwd, 'email': uemail }) });if (!response.ok) {yield (0, _effects.put)((0, _actions.RegisterFail)());} else {yield (0, _effects.put)((0, _actions.RegisterSuccess)(uname, uemail));}}function* watchId() {while (true) {const data = yield (0, _effects.take)('POST_ID_REQUEST');yield (0, _effects.call)(postId, data);}}function* postId(data) {console.log("postId is called!");console.log(data.uname);let uname = data.uname;const response = yield (0, _effects.call)(fetch, user_dup_url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ 'username': uname }) });if (!response.ok) {yield (0, _effects.put)((0, _actions.IdFail)());} else {yield (0, _effects.put)((0, _actions.IdSuccess)());}}function* watchLogin() {while (true) {const data = yield (0, _effects.take)('POST_LOGIN_REQUEST');yield (0, _effects.call)(postLogin, data);}}function* postLogin(data) {//  console.log("postLogin is called!")
  //  console.log(data.uname)
  //  console.log(data.upwd)
  let uname = data.uname;let upwd = data.upwd;const hash = new Buffer(`${uname}:${upwd}`).toString('base64');const response = yield (0, _effects.call)(fetch, user_login_url, { method: 'GET', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': 'application/json' } });if (!response.ok) {//    console.log('fail')
    deleteCookie("uname");deleteCookie("upwd");yield (0, _effects.put)((0, _actions.LoginFail)());} else {//    console.log('success')
    setCookie("uname", uname, 60);setCookie("upwd", upwd, 60);yield (0, _effects.put)((0, _actions.LoginSuccess)(uname, hash));}}function setCookie(cname, cvalue, exdays) {var d = new Date();d.setTime(d.getTime() + exdays * 24 * 60 * 60 * 1000);var expires = "expires=" + d.toUTCString();document.cookie = cname + "=" + btoa(JSON.stringify(cvalue)) + ";" + expires + ";path=/";}function deleteCookie(cname) {document.cookie = cname + "=;path=/";}function getCookie(cname) {var name = cname + "=";var decodedCookie = decodeURIComponent(document.cookie);var ca = decodedCookie.split(';');for (var i = 0; i < ca.length; i++) {var c = ca[i];while (c.charAt(0) == ' ') {c = c.substring(1);}if (c.indexOf(name) == 0) {return c.substring(name.length, c.length);}}return "";}function* watchGetUser() {while (true) {const data = yield (0, _effects.take)('GET_USER_REQUEST');yield (0, _effects.call)(getUser, data);}}const getApi = (url, settings) => {return fetch(url, settings).then(response => {if (response.ok) return response;const error = new Error(`${response.status} ${response.statusText}`);error.response = response;throw error;}).then(response => response.json()).then(data => {return data;});};function* getUser(data) {let uname = data.uname;const response = yield (0, _effects.call)(getApi, chat_userlist_url, { method: 'GET', headers: { 'Content-Type': 'application/json' } });let userlist = response;let len = userlist.length;let usernames = [];for (var i = 0; i < len; i++) {var name = userlist[i].username;if (name != uname) usernames.push(name);}yield (0, _effects.put)((0, _actions.SetUserList)(usernames));}function* watchChat() {while (true) {const data = yield (0, _effects.take)('POST_CHAT_REQUEST');yield (0, _effects.call)(postChat, data);}}function* postChat(data) {let receiver = data.receiver;let chat = data.chat;const hash = data.ubase64;const response = yield (0, _effects.call)(fetch, chat_url, { method: 'POST', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': `application/json` }, body: JSON.stringify({ receiver: receiver, chat: chat }) });if (response.ok) {console.log('chat_success');} else {console.log('chat_fail');}}function* watchGetChat() {while (true) {const data = yield (0, _effects.take)('GET_CHAT_REQUEST');yield (0, _effects.call)(getChat, data);}}function* getChat(data) {const hash = data.ubase64;const response = yield (0, _effects.call)(getApi, chat_url, { method: 'GET', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': 'application/json' } });let chatlog = response;yield (0, _effects.put)((0, _actions.SetChatLog)(chatlog));}function* watchArticle() {while (true) {const data = yield (0, _effects.take)('POST_ARTICLE_REQUEST');yield (0, _effects.call)(postArticle, data);}}function* postArticle(data) {const hash = data.ubase64;const text = data.text;const response = yield (0, _effects.call)(fetch, article_url, { method: 'POST', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': 'application/json' }, body: JSON.stringify({ content: text }) } //  console.log(response)
  );if (response.ok) {console.log('success');} else {console.log('fail');}yield (0, _effects.call)(getArticle, data);}function* watchGetArticle_WITH_ID() {while (true) {const data = yield (0, _effects.take)('GET_ARTICLE_REQUEST_WITH_ID');yield (0, _effects.call)(getArticle_WITH_ID, data);}}function* getArticle_WITH_ID(data) {const hash = data.ubase64;const url = article_url_WITH_ID(data.id);const response = yield (0, _effects.call)(getApi, url, { method: 'GET', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': 'application/json' } });let article = { id: 0, author: "", content: "", created_time: new Date(), updated_time: new Date(), like_list: [], comment_list: [], likes_count: 0, comments_count: 0, nickname: null, avatar: null };let id = response["id"];let author = response["author"];let created = response["created"];let updated = response["updated"];let content = response["content"];let comments_count = response["comments_count"];let likes_count = response["likes_count"];article.id = id;article.author = author;article.content = content;article.created_time = new Date(created);article.updated_time = new Date(updated);article.likes_count = likes_count;article.comments_count = comments_count;let nickname = null;let avatar = null;if (response['userprofile'] === null) {nickname = null;avatar = null;} else {nickname = response['userprofile']['nickname'] || null;avatar = response['userprofile']['avatar'] || null;}article.nickname = nickname;article.avatar = avatar;yield (0, _effects.put)((0, _actions.SetArticleList_WITH_ID)(article, parseInt(id)));let newData = { ubase64: "", id: 0 };newData.ubase64 = hash;newData.id = article.id;yield (0, _effects.call)(getComment, newData);newData = { ubase64: "", id: "" };newData.ubase64 = hash;newData.id = data.id + "_0";yield (0, _effects.call)(getLike, newData);}function* watchGetArticle() {while (true) {const data = yield (0, _effects.take)('GET_ARTICLE_REQUEST');yield (0, _effects.call)(getArticle, data);}}function* getArticle(data) {const hash = data.ubase64;const response = yield (0, _effects.call)(getApi, article_url, { method: 'GET', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': 'application/json' } });let articlelist = [];for (var index in response) {let article = { id: 0, author: "", content: "", created_time: new Date(), updated_time: new Date(), like_list: [], comment_list: [], likes_count: 0, comments_count: 0, nickname: null, avatar: null };let id = response[index]["id"];let author = response[index]["author"];let created = response[index]["created"];let updated = response[index]["updated"];let content = response[index]["content"];let comments_count = response[index]["comments_count"];let likes_count = response[index]["likes_count"];article.id = id;article.author = author;article.content = content;article.created_time = new Date(created);article.updated_time = new Date(updated);article.likes_count = likes_count;article.comments_count = comments_count;let nickname = null;let avatar = null;if (response[index]['userprofile'] === null) {nickname = null;avatar = null;} else {nickname = response[index]['userprofile']['nickname'] || null;avatar = response[index]['userprofile']['avatar'] || null;}article.nickname = nickname;article.avatar = avatar;articlelist.push(article);}yield (0, _effects.put)((0, _actions.SetArticleList)(articlelist));for (var index in articlelist) {let data = { ubase64: "", id: 0 };data.ubase64 = hash;data.id = articlelist[index].id;yield (0, _effects.call)(getComment, data);}for (var index in articlelist) {let data = { ubase64: "", id: "" };data.ubase64 = hash;data.id = articlelist[index].id + "_0";yield (0, _effects.call)(getLike, data);}}function* watchDeleteImage() {while (true) {const data = yield (0, _effects.take)('DELETE_IMAGE_REQUEST');yield (0, _effects.call)(deleteImage, data);}}function* deleteImage(data) {const hash = data.ubase64;const idlist = data.idlist;for (var index in idlist) {const response = yield (0, _effects.call)(fetch, image_id_url(idlist[index]), { method: 'DELETE', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': 'application/json' } });console.log(response);}yield (0, _effects.call)(getImage, data);}function* watchGetImage() {while (true) {const data = yield (0, _effects.take)('GET_IMAGE_REQUEST');yield (0, _effects.call)(getImage, data);}}function* getImage(data) {const hash = data.ubase64;const response = yield (0, _effects.call)(getApi, image_url, { method: 'GET', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': 'application/json' } });let imagelist = [];for (var index in response) {let image = { id: 0, author: "", created: new Date(), updated: new Date(), image: "" };let id = response[index]["id"];let author = response[index]["author"];let created = new Date(response[index]["created"]);let updated = new Date(response[index]["updated"]);let image_ = response[index]["image"];image.id = id;image.author = author;image.created = created;image.updated = updated;image.image = image_;imagelist.push(image);}yield (0, _effects.put)((0, _actions.SetImageRequest)(imagelist));}function* watchComment() {while (true) {const data = yield (0, _effects.take)('POST_COMMENT_REQUEST');const hash = data.ubase64;const id = data.id;yield (0, _effects.call)(postComment, data);}}function* postComment(data) {console.log(data);const hash = data.ubase64;const text = data.text;const id = data.id; //console.log(comment_url(id))
  const response = yield (0, _effects.call)(fetch, comment_url(id), { method: 'POST', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': `application/json` }, body: JSON.stringify({ content: text }) });if (response.ok) {console.log('comment_success');} else {console.log('comment_fail');}let newData = { ubase64: "", id: 0 };newData.ubase64 = hash;newData.id = id;yield (0, _effects.call)(getArticle_WITH_ID, newData);}function* watchGetComment() {while (true) {const data = yield (0, _effects.take)('GET_COMMENT_REQUEST');yield (0, _effects.call)(getComment, data);}}function* getComment(data) {const hash = data.ubase64;const id = data.id;const response = yield (0, _effects.call)(getApi, comment_url(id), { method: 'GET', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': 'application/json' } });let commentlist = [];for (var index in response) {let comment = { id: 0, article_id: 0, author: "", content: "", created: new Date(), updated: new Date(), like_list: [], likes_count: 0 };let id = response[index]["id"];let article_id = response[index]["article"];let author = response[index]["author"];let content = response[index]["content"];let created = response[index]["created"];let updated = response[index]["updated"];let likes_count = response[index]["likes_count"];comment.id = id;comment.article_id = article_id;comment.author = author;comment.content = content;comment.updated = new Date(updated);comment.created = new Date(created);comment.likes_count = likes_count;commentlist.push(comment);} //console.log(commentlist)
  yield (0, _effects.put)((0, _actions.SetCommentList)(commentlist, parseInt(id)));for (var index in commentlist) {let data = { ubase64: "", id: "" };data.ubase64 = hash;data.id = commentlist[index].article_id + "_" + commentlist[index].id;yield (0, _effects.call)(getLike, data);}}function* watchLike() {while (true) {const data = yield (0, _effects.take)('POST_LIKE_REQUEST');yield (0, _effects.call)(postLike, data //console.log(data)
    );}}function* postLike(data) {//console.log(data.id)
  const hash = data.ubase64;const id = data.id;const id1 = id.split('_')[0];const id2 = id.split('_')[1];const url = id2 == 0 ? like_url(id1) : like_comment_url(id1, id2); //console.log(url)
  const response = yield (0, _effects.call)(fetch, url, { method: 'POST', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': `application/json` } });if (response.ok) {console.log('like_success');} else {console.log('like_fail');}yield (0, _effects.call)(getLike, data);}function* watchGetLike() {while (true) {const data = yield (0, _effects.take)('GET_LIKE_REQUEST');yield (0, _effects.call)(getLike, data);}}function* getLike(data) {//console.log(data)
  const hash = data.ubase64;const id = data.id;const id1 = id.split('_')[0];const id2 = id.split('_')[1];const url = id2 == 0 ? like_url(id1) : like_comment_url(id1, id2);console.log(data);const response = yield (0, _effects.call)(getApi, url, { method: 'GET', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': 'application/json' } });console.log(response);let likelist = [];for (var index in response) {let like = { article_id: 0, comment_id: 0, author: "", created: new Date(), id: 0, updated: new Date() };let article_id = id2 == 0 ? response[index]["article"] : id1;let comment_id = id2 == 0 ? 0 : response[index]["comment"];let author = response[index]["author"];let created = response[index]["created"];let id = response[index]["id"];let updated = response[index]["updated"];like.article_id = article_id;like.comment_id = comment_id;like.author = author;like.created = new Date(created);like.id = id;like.updated = new Date(updated);likelist.push(like);}yield (0, _effects.put)((0, _actions.SetLikeList)(likelist, parseInt(id1), parseInt(id2)) //console.log(likelist)
  );}function* watchDeleteLike() {while (true) {const data = yield (0, _effects.take)('DELETE_LIKE_REQUEST');yield (0, _effects.call)(deleteLike, data);}}function* deleteLike(data) {const hash = data.ubase64;const id = data.id;const id1 = id.split('_')[0];const id2 = id.split('_')[1];const url = id2 == 0 ? like_url(id1) : like_comment_url(id1, id2);const response = yield (0, _effects.call)(fetch, url, { method: 'DELETE', headers: { 'Authorization': `Basic ${hash}` } });if (response.ok) {console.log('like_delete_success');} else {console.log('like_delete_fail');}yield (0, _effects.call)(getLike, data);}function* watchDeleteArticle() {while (true) {const data = yield (0, _effects.take)('DELETE_ARTICLE_REQUEST');yield (0, _effects.call)(deleteArticle, data);}}function* deleteArticle(data) {const hash = data.ubase64;const id = data.id;const response = yield (0, _effects.call)(fetch, article_url_WITH_ID(id), { method: 'DELETE', headers: { 'Authorization': `Basic ${hash}` } });if (response.ok) {console.log('article_delete_success');} else {console.log('article_delete_fail');}yield (0, _effects.call)(getArticle, data);}function* watchUpdateArticle() {while (true) {const data = yield (0, _effects.take)('UPDATE_ARTICLE_REQUEST');yield (0, _effects.call)(updateArticle, data);}}function* updateArticle(data) {const hash = data.ubase64;const id = data.id;const content = data.content;console.log(content);var form = new FormData();form.append("content", content);const response = yield (0, _effects.call)(fetch, article_url_WITH_ID(id), { "async": true, "crossDomain": true, method: 'PUT', headers: { 'Authorization': `Basic ${hash}` }, "processData": false, "contentType": false, "mimeType": "multipart/form-data", body: form });console.log(response);if (response.ok) {console.log('like_delete_success');} else {console.log('like_delete_fail');}let newData = { ubase64: "", id: 0 };newData.ubase64 = hash;newData.id = id;yield (0, _effects.call)(getArticle_WITH_ID, newData);}function* watchGetGroupList() {while (true) {const data = yield (0, _effects.take)('GET_GROUP_LIST_REQUEST');yield (0, _effects.call)(getGroupList, data);}}function* getGroupList(data) {//console.log(data)
  const hash = data.ubase64;const response = yield (0, _effects.call)(getApi, group_list_url, { method: 'GET', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': 'application/json' } });let group_list = [];for (var index in response) {let group = { id: 0, group_name: "", admin: "", member: 0, member_list: [] };let id = response[index]["id"];let group_name = response[index]["group_name"];let admin = response[index]["admin"];let member = response[index]["member"];let member_list = response[index]["member_list"]; //console.log(member_list)
    group.id = id;group.group_name = group_name;group.admin = admin;group.member = member;group.member_list = member_list;group_list.push(group);} //console.log(group_list)
  yield (0, _effects.put)((0, _actions.SetGroupListRequest)(group_list));}function* watchPostGroupList() {while (true) {const data = yield (0, _effects.take)('POST_GROUP_LIST_REQUEST');yield (0, _effects.call)(postGroupList, data);}}function* postGroupList(data) {const hash = data.ubase64;const name = data.group_name; //console.log(data)
  const response = yield (0, _effects.call)(fetch, group_list_url, { method: 'POST', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': 'application/json' }, body: JSON.stringify({ group_name: name }) });if (response.ok) {console.log('post_group_list_success');const response2 = yield (0, _effects.call)(getApi, group_list_url, { method: 'GET', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': 'application/json' } });const data2 = { ubase64: hash, group_id: response2[response2.length - 1]['id'] };yield (0, _effects.call)(postGroupMember, data2);const data3 = { ubase64: hash };yield (0, _effects.call)(getGroupList, data3);} else {console.log('post_group_list_fail');}}function* watchPostGroupMember() {while (true) {const data = yield (0, _effects.take)('POST_GROUP_MEMBER_REQUEST');yield (0, _effects.call)(postGroupMember, data);}}function* postGroupMember(data) {const hash = data.ubase64;const id = data.group_id; //console.log(data)
  const response = yield (0, _effects.call)(fetch, group_member_url(id), { method: 'POST', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': 'application/json' } });if (response.ok) {console.log('post_group_member_success');const data2 = { ubase64: hash };yield (0, _effects.call)(getGroupList, data2);} else {console.log('post_group_member_fail');}}function* watchDeleteGroupMember() {while (true) {const data = yield (0, _effects.take)('DELETE_GROUP_MEMBER_REQUEST');yield (0, _effects.call)(deleteGroupMember, data);}}function* deleteGroupMember(data) {const hash = data.ubase64;const id = data.group_id;const response = yield (0, _effects.call)(fetch, group_member_url(id), { method: 'DELETE', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': 'application/json' } });if (response.ok) {console.log('delete_group_member_success');const data2 = { ubase64: hash };yield (0, _effects.call)(getGroupList, data2);} else {console.log('delete_group_member_fail');}}function* watchGetGroupNotice() {while (true) {const data = yield (0, _effects.take)('GET_GROUP_NOTICE_REQUEST');yield (0, _effects.call)(getGroupNotice, data);}}function* getGroupNotice(data) {const hash = data.ubase64;const id = data.group_id;const response = yield (0, _effects.call)(getApi, group_notice_url(id), { method: 'GET', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': 'application/json' } } //console.log(response)
  );let notice_list = [];for (var index in response) {let notice = { id: 0, created: new Date(), group: 0, text: "" };let id = response[index]["id"];let created = response[index]["created"];let group = response[index]["group"];let text = response[index]["notice"];notice.id = id;notice.created = new Date(created);notice.group = group;notice.text = text;notice_list.push(notice);} //console.log(notice_list)
  yield (0, _effects.put)((0, _actions.SetGroupNoticeRequest)(notice_list));}function* watchGetGroupForum() {while (true) {const data = yield (0, _effects.take)('GET_GROUP_FORUM_REQUEST');yield (0, _effects.call)(getGroupForum, data);}}function* getGroupForum(data) {const hash = data.ubase64;const id = data.group_id;const response = yield (0, _effects.call)(getApi, group_forum_url(id), { method: 'GET', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': 'application/json' } });let forum_list = [];for (var index in response) {let forum = { id: 0, created: new Date(), group: 0, author: "", text: "" };let id = response[index]["id"];let created = response[index]["created"];let group = response[index]["group"];let author = response[index]["author"];let text = response[index]["text"];forum.id = id;forum.created = new Date(created);forum.group = group;forum.author = author;forum.text = text;forum_list.push(forum);}yield (0, _effects.put)((0, _actions.SetGroupForumRequest)(forum_list));}function* watchPostGroupNotice() {while (true) {const data = yield (0, _effects.take)('POST_GROUP_NOTICE_REQUEST');yield (0, _effects.call)(postGroupNotice, data);}}function* postGroupNotice(data) {const hash = data.ubase64;const id = data.group_id;const text = data.text;const response = yield (0, _effects.call)(fetch, group_notice_url(id), { method: 'POST', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': 'application/json' }, body: JSON.stringify({ 'notice': text }) });if (response.ok) {console.log('post_group_notice_success');yield (0, _effects.call)(getGroupNotice, data);} else {console.log('post_group_notice_fail');}}function* watchPostGroupForum() {while (true) {const data = yield (0, _effects.take)('POST_GROUP_FORUM_REQUEST');yield (0, _effects.call)(postGroupForum, data);}}function* postGroupForum(data) {const hash = data.ubase64;const id = data.group_id;const text = data.text;const response = yield (0, _effects.call)(fetch, group_forum_url(id), { method: 'POST', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': 'application/json' }, body: JSON.stringify({ 'text': text }) });if (response.ok) {console.log('post_group_forum_success');yield (0, _effects.call)(getGroupForum, data);} else {console.log('post_group_forum_fail');}}function* watchImage() {while (true) {const data = yield (0, _effects.take)('POST_IMAGE_REQUEST');yield (0, _effects.call)(postImage, data);}}function* postImage(data) {const hash = data.ubase64;const files = data.files;console.log(files);for (var index in files) {let form = new FormData();form.append("image", files[index]);let response = yield (0, _effects.call)(fetch, image_url, { "async": true, "crossDomain": true, method: 'POST', headers: { 'Authorization': `Basic ${hash}` }, "processData": false, "contentType": false, "mimeType": "multipart/form-data", body: form });console.log(response);if (response.ok) {console.log('success');} else {console.log('fail');}}yield (0, _effects.call)(getImage, data);}function* watchGetProfile() {while (true) {const data = yield (0, _effects.take)('GET_PROFILE_REQUEST');yield (0, _effects.call)(getProfile, data);}}function* getProfile(data) {const hash = data.ubase64;const response = yield (0, _effects.call)(getApi, profile_url, { method: 'GET', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': 'application/json' } });console.log(response /*
email:state.profile_reducer.email,
nickname:state.profile_reducer.nickname,
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   avatar: state.profile_reducer.avatar,
first_name:state.profile_reducer.first_name,
last_name:state.profile_reducer.last_name,
last_login:state.profile_reducer.last_login,
date_joined: state.profile_reducer.date_joined
const email = response['email'];let nickname = null;let avatar = null;if (response['userprofile'] === null) {nickname = null;avatar = null;} else {nickname = response['userprofile']['nickname'] || null;avatar = response['userprofile']['avatar'] || null;}const first_name = response['first_name'] || null;const last_name = response['last_name'] || null;const last_login = new Date(response['last_login']) || null;const date_joined = new Date(response['date_joined']) || null;console.log(last_login);console.log(email);console.log(nickname);console.log(avatar);console.log(first_name);console.log(last_name);console.log(last_login);console.log(date_joined);yield (0, _effects.put)((0, _actions.SetProfileReqeust)(email, nickname, avatar, first_name, last_name, last_login, date_joined));}function* watchUpdateProfile() {while (true) {const data = yield (0, _effects.take)('UPDATE_PROFILE_REQUEST');yield (0, _effects.call)(updateProfile, data);}}function* updateProfile(data) {const hash = data.ubase64;const nickname = data.nickname;const first_name = data.first_name;const last_name = data.last_name;const avatar = data.avatar;console.log('saga');var form = new FormData();if (nickname !== null) form.append('userprofile.nickname', nickname);if (first_name !== null) form.append('first_name', first_name);if (last_name !== null) form.append('last_name', last_name);if (avatar !== null) form.append('userprofile.avatar', avatar);const response = yield (0, _effects.call)(fetch, profile_url, { "async": true, "crossDomain": true, method: 'PUT', headers: { 'Authorization': `Basic ${hash}` }, "processData": false, "contentType": false, "mimeType": "multipart/form-data", body: form });console.log(response);if (response.ok) {console.log('success');} else {console.log('fail');}yield (0, _effects.call)(getProfile, data);}function* watchGetFollow() {while (true) {const data = yield (0, _effects.take)('GET_FOLLOW_REQUEST');yield (0, _effects.call)(getFollow, data);}}function* getFollow(data) {const hash = data.ubase64;const response = yield (0, _effects.call)(getApi, follow_url, { method: 'GET', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': 'application/json' } });let follow_list = [];for (var index in response) {let item = { id: 0, user: "", follow: "" };let id = response[index]["id"];let user = response[index]["user"];let follow = response[index]["follow"];item.id = id;item.user = user;item.follow = follow;follow_list.push(item);} //console.log(follow_list)
  yield (0, _effects.put)((0, _actions.SetFollowRequest)(follow_list));}function* watchPostFollow() {while (true) {const data = yield (0, _effects.take)('POST_FOLLOW_REQUEST');yield (0, _effects.call)(postFollow, data);}}function* postFollow(data) {const hash = data.ubase64;const follow = data.follow;const response = yield (0, _effects.call)(fetch, follow_url, { method: 'POST', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': 'application/json' }, body: JSON.stringify({ 'follow': follow }) });if (response.ok) {console.log('post_follow_success');const data2 = { ubase64: hash };yield (0, _effects.call)(getFollow, data2);} else {console.log('post_follow_fail');}}function* watchDeleteFollow() {while (true) {const data = yield (0, _effects.take)('DELETE_FOLLOW_REQUEST');yield (0, _effects.call)(deleteFollow, data);}}function* deleteFollow(data) {const hash = data.ubase64;const id = data.id;const response = yield (0, _effects.call)(fetch, follow_retrieve_url(id), { method: 'DELETE', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': 'application/json' } });if (response.ok) {console.log('delete_follow_success');const data2 = { ubase64: hash };yield (0, _effects.call)(getFollow, data2);} else {console.log('delete_follow_fail');}}function* watchGetFollowArticle() {while (true) {const data = yield (0, _effects.take)('GET_FOLLOW_ARTICLE_REQUEST');yield (0, _effects.call)(getFollowArticle, data);}}function* getFollowArticle(data) {const hash = data.ubase64;const id = data.id;const response = yield (0, _effects.call)(getApi, follow_article_url(id), { method: 'GET', headers: { 'Authorization': `Basic ${hash}`, 'Content-Type': 'application/json' } });let follow_article_list = [];for (var index in response) {let article = { id: 0, author: "", content: "", created_time: new Date(), updated_time: new Date(), like_list: [], comment_list: [], likes_count: 0, comments_count: 0 };let id = response[index]["id"];let author = response[index]["author"];let created = response[index]["created"];let updated = response[index]["updated"];let content = response[index]["content"];let comments_count = response[index]["comments_count"];let likes_count = response[index]["likes_count"];article.id = id;article.author = author;article.content = content;article.created_time = new Date(created);article.updated_time = new Date(updated);article.likes_count = likes_count;article.comments_count = comments_count;follow_article_list.push(article);}yield (0, _effects.put)((0, _actions.SetFollowArticleRequest)(follow_article_list));}function* Saga() {yield (0, _effects.spawn)(watchRegister);yield (0, _effects.spawn)(watchId);yield (0, _effects.spawn)(watchLogin);yield (0, _effects.spawn)(watchGetUser);yield (0, _effects.spawn)(watchChat);yield (0, _effects.spawn)(watchGetChat);yield (0, _effects.spawn)(watchArticle);yield (0, _effects.spawn)(watchGetArticle);yield (0, _effects.spawn)(watchDeleteArticle);yield (0, _effects.spawn)(watchUpdateArticle);yield (0, _effects.spawn)(watchGetImage);yield (0, _effects.spawn)(watchDeleteImage);yield (0, _effects.spawn)(watchComment);yield (0, _effects.spawn)(watchGetComment);yield (0, _effects.spawn)(watchLike);yield (0, _effects.spawn)(watchGetLike);yield (0, _effects.spawn)(watchDeleteLike);yield (0, _effects.spawn)(watchGetArticle_WITH_ID);yield (0, _effects.spawn)(watchGetGroupList);yield (0, _effects.spawn)(watchPostGroupList);yield (0, _effects.spawn)(watchPostGroupMember);yield (0, _effects.spawn)(watchDeleteGroupMember);yield (0, _effects.spawn)(watchGetGroupNotice);yield (0, _effects.spawn)(watchGetGroupForum);yield (0, _effects.spawn)(watchPostGroupNotice);yield (0, _effects.spawn)(watchPostGroupForum);yield (0, _effects.spawn)(watchImage);yield (0, _effects.spawn)(watchGetProfile);yield (0, _effects.spawn)(watchUpdateProfile);yield (0, _effects.spawn)(watchGetFollow);
  yield (0, _effects.spawn)(watchPostFollow);
  yield (0, _effects.spawn)(watchDeleteFollow);
  yield (0, _effects.spawn)(watchGetFollowArticle);
}