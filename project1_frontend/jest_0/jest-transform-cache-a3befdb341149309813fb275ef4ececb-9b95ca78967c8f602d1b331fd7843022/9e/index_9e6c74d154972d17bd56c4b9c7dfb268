'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/home/ubuntu/project1_frontend_submit/src/components/ImageGallery/index.js';var _react = require('react');var _react2 = _interopRequireDefault(_react);
var _reactDom = require('react-dom');var _reactDom2 = _interopRequireDefault(_reactDom);
require('react-image-gallery/styles/css/image-gallery.css');
var _reactImageGallery = require('react-image-gallery');var _reactImageGallery2 = _interopRequireDefault(_reactImageGallery);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

const PREFIX_URL = 'https://raw.githubusercontent.com/xiaolin/react-image-gallery/master/static/';

class IG extends _react2.default.Component {

  constructor() {
    super();
    this.state = {
      showIndex: false,
      slideOnThumbnailHover: false,
      showBullets: true,
      infinite: true,
      showThumbnails: true,
      showFullscreenButton: true,
      showGalleryFullscreenButton: true,
      showPlayButton: true,
      showGalleryPlayButton: true,
      showNav: true,
      slideDuration: 450,
      slideInterval: 2000,
      thumbnailPosition: 'bottom',
      showVideo: {} };

  }
  componentDidUpdate(prevProps, prevState) {
    if (this.state.slideInterval !== prevState.slideInterval ||
    this.state.slideDuration !== prevState.slideDuration) {
      // refresh setInterval
      this._imageGallery.pause();
      this._imageGallery.play();
    }
  }

  _onImageClick(event) {
    console.log('clicked on image', event.target, 'at index', this._imageGallery.getCurrentIndex());
  }

  _onImageLoad(event) {
    console.log('loaded image', event.target.src);
  }

  _onSlide(index) {
    this._resetVideo();
    console.log('slid to index', index);
  }

  _onPause(index) {
    console.log('paused on index', index);
  }

  _onScreenChange(fullScreenElement) {
    console.log('isFullScreen?', !!fullScreenElement);
  }

  _onPlay(index) {
    console.log('playing from index', index);
  }

  _handleInputChange(state, event) {
    this.setState({ [state]: event.target.value });
  }

  _handleCheckboxChange(state, event) {
    this.setState({ [state]: event.target.checked });
  }

  _handleThumbnailPositionChange(event) {
    this.setState({ thumbnailPosition: event.target.value });
  }

  _resetVideo() {
    this.setState({ showVideo: {} });

    if (this.state.showPlayButton) {
      this.setState({ showGalleryPlayButton: true });
    }

    if (this.state.showFullscreenButton) {
      this.setState({ showGalleryFullscreenButton: true });
    }
  }

  _toggleShowVideo(url) {
    this.state.showVideo[url] = !Boolean(this.state.showVideo[url]);
    this.setState({
      showVideo: this.state.showVideo });


    if (this.state.showVideo[url]) {
      if (this.state.showPlayButton) {
        this.setState({ showGalleryPlayButton: false });
      }

      if (this.state.showFullscreenButton) {
        this.setState({ showGalleryFullscreenButton: false });
      }
    }
  }

  _renderVideo(item) {
    return (
      _react2.default.createElement('div', { className: 'image-gallery-image', __source: { fileName: _jsxFileName, lineNumber: 106 }, __self: this },

        this.state.showVideo[item.embedUrl] ?
        _react2.default.createElement('div', { className: 'video-wrapper', __source: { fileName: _jsxFileName, lineNumber: 109 }, __self: this },
          _react2.default.createElement('a', {
            className: 'close-video',
            onClick: this._toggleShowVideo.bind(this, item.embedUrl), __source: { fileName: _jsxFileName, lineNumber: 110 }, __self: this }),


          _react2.default.createElement('iframe', {
            width: '560',
            height: '315',
            src: item.embedUrl,
            frameBorder: '0',
            allowFullScreen: true, __source: { fileName: _jsxFileName, lineNumber: 115 }, __self: this })) :




        _react2.default.createElement('a', { onClick: this._toggleShowVideo.bind(this, item.embedUrl), __source: { fileName: _jsxFileName, lineNumber: 125 }, __self: this },
          _react2.default.createElement('div', { className: 'play-button', __source: { fileName: _jsxFileName, lineNumber: 126 }, __self: this }),
          _react2.default.createElement('img', { src: item.original, __source: { fileName: _jsxFileName, lineNumber: 127 }, __self: this }),

          item.description &&
          _react2.default.createElement('span', {
              className: 'image-gallery-description',
              style: { right: '0', left: 'initial' }, __source: { fileName: _jsxFileName, lineNumber: 130 }, __self: this },

            item.description))));






  }

  render() {
    return (
      _react2.default.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 145 }, __self: this },
        _react2.default.createElement(_reactImageGallery2.default, {
          ref: i => this._imageGallery = i,
          items: this.props.imagelist,
          lazyLoad: false,
          onClick: this._onImageClick.bind(this),
          onImageLoad: this._onImageLoad,
          onSlide: this._onSlide.bind(this),
          onPause: this._onPause.bind(this),
          onScreenChange: this._onScreenChange.bind(this),
          onPlay: this._onPlay.bind(this),
          infinite: this.state.infinite,
          showBullets: this.state.showBullets,
          showFullscreenButton: this.state.showFullscreenButton && this.state.showGalleryFullscreenButton,
          showPlayButton: this.state.showPlayButton && this.state.showGalleryPlayButton,
          showThumbnails: this.state.showThumbnails,
          showIndex: this.state.showIndex,
          showNav: this.state.showNav,
          thumbnailPosition: this.state.thumbnailPosition,
          slideDuration: parseInt(this.state.slideDuration),
          slideInterval: parseInt(this.state.slideInterval),
          slideOnThumbnailHover: this.state.slideOnThumbnailHover, __source: { fileName: _jsxFileName, lineNumber: 146 }, __self: this })));



  }}exports.default =


IG;