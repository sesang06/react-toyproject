'use strict';Object.defineProperty(exports, "__esModule", { value: true });var _jsxFileName = '/home/ubuntu/project1_frontend_submit/src/components/Gallery/index.js';var _propTypes = require('prop-types');var _propTypes2 = _interopRequireDefault(_propTypes);
var _react = require('react');var _react2 = _interopRequireDefault(_react);
var _reactImages = require('react-images');var _reactImages2 = _interopRequireDefault(_reactImages);
var _noImportant = require('aphrodite/no-important');
require('./index.css');function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}
class Gallery extends _react.Component {
	constructor() {
		super();

		this.state = {
			lightboxIsOpen: false,
			currentImage: 0 };


		this.closeLightbox = this.closeLightbox.bind(this);
		this.gotoNext = this.gotoNext.bind(this);
		this.gotoPrevious = this.gotoPrevious.bind(this);
		this.gotoImage = this.gotoImage.bind(this);
		this.handleClickImage = this.handleClickImage.bind(this);
		this.openLightbox = this.openLightbox.bind(this);
	}
	openLightbox(index, event) {
		event.preventDefault();
		this.setState({
			currentImage: index,
			lightboxIsOpen: true });

	}
	closeLightbox() {
		this.setState({
			currentImage: 0,
			lightboxIsOpen: false });

	}
	gotoPrevious() {
		this.setState({
			currentImage: this.state.currentImage - 1 });

	}
	gotoNext() {
		this.setState({
			currentImage: this.state.currentImage + 1 });

	}
	gotoImage(index) {
		this.setState({
			currentImage: index });

	}
	handleClickImage() {
		if (this.state.currentImage === this.props.images.length - 1) return;

		this.gotoNext();
	}
	renderGallery() {
		const { images } = this.props;

		if (!images) return;
		const settings = {
			infinite: true,
			speed: 500,
			dot: true,
			slidesToShow: 6,
			slidesToScroll: 1 };

		const gallery = images.map((obj, i) => {
			return (
				_react2.default.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 68 }, __self: this },

					_react2.default.createElement('a', {
							href: obj.src,
							className: (0, _noImportant.css)(classes.thumbnail, classes[obj.orientation]),
							key: i,
							onClick: e => this.openLightbox(i, e), __source: { fileName: _jsxFileName, lineNumber: 70 }, __self: this },


						_react2.default.createElement('img', { src: obj.thumbnail, className: (0, _noImportant.css)(classes.source), __source: { fileName: _jsxFileName, lineNumber: 77 }, __self: this }))));



		});

		return (
			_react2.default.createElement('div', { __source: { fileName: _jsxFileName, lineNumber: 84 }, __self: this },
				gallery));


	}
	render() {

		return (
			_react2.default.createElement('div', { className: 'section', __source: { fileName: _jsxFileName, lineNumber: 92 }, __self: this },
				this.props.heading && _react2.default.createElement('h2', { __source: { fileName: _jsxFileName, lineNumber: 93 }, __self: this }, this.props.heading),
				this.props.subheading && _react2.default.createElement('p', { __source: { fileName: _jsxFileName, lineNumber: 94 }, __self: this }, this.props.subheading),
				this.renderGallery(),
				_react2.default.createElement(_reactImages2.default, {
					currentImage: this.state.currentImage,
					images: this.props.images,
					isOpen: this.state.lightboxIsOpen,
					onClickImage: this.handleClickImage,
					onClickNext: this.gotoNext,
					onClickPrev: this.gotoPrevious,
					onClickThumbnail: this.gotoImage,
					onClose: this.closeLightbox,
					showThumbnails: this.props.showThumbnails,
					theme: this.props.theme, __source: { fileName: _jsxFileName, lineNumber: 96 }, __self: this })));



	}}


Gallery.displayName = 'Gallery';
Gallery.propTypes = {
	heading: _propTypes2.default.string,
	images: _propTypes2.default.array,
	showThumbnails: _propTypes2.default.bool,
	subheading: _propTypes2.default.string };


const gutter = {
	small: 2,
	large: 4 };

const classes = _noImportant.StyleSheet.create({
	gallery: {
		marginRight: -gutter.small,
		overflow: 'hidden',

		'@media (min-width: 500px)': {
			marginRight: -gutter.large } },



	// anchor
	thumbnail: {
		boxSizing: 'border-box',
		display: 'block',
		float: 'left',
		lineHeight: 0,
		paddingRight: gutter.small,
		paddingBottom: gutter.small,
		overflow: 'hidden',

		'@media (min-width: 500px)': {
			paddingRight: gutter.large,
			paddingBottom: gutter.large } },



	// orientation
	landscape: {
		width: '30%' },

	square: {
		paddingBottom: 0,
		width: '40%',

		'@media (min-width: 500px)': {
			paddingBottom: 0 } },



	// actual <img />
	source: {
		border: 0,
		display: 'block',
		height: 'auto',
		maxWidth: '100%',
		width: 'auto' } });exports.default =



Gallery;